global function FirstPersonSequenceForce1P_Init
global function FirstPersonSequenceForce1P_InitPlaylistVars

#if SERVER
	global function FirstPersonSequenceForce1P
#endif

#if CLIENT
	global function ServerCallback_HideHudForFPHackAnim
#endif

global const string FORCE1P_PILOT_1P_ATTACHMENT = "HEADFOCUS"
global const string FORCE1P_TITAN_1P_ATTACHMENT = "HATCH_HEAD" // CHEST_LASER could be better, but is only on atlas titans

global const string FORCE1P_PILOT_1P_HIDDEN_BODYGROUP = "head"
global const string FORCE1P_TITAN_1P_HIDDEN_BODYGROUP = "torso"

global const string FORCE1P_PILOT_ENTITYCLASS = "npc_pilot_elite"
global const string FORCE1P_TITAN_ENTITYCLASS = "npc_titan"

global struct Forced1PSequenceData
{
	entity player
	entity camera
	entity ownerProxy
	entity thirdPersonProxy
}

void function FirstPersonSequenceForce1P_Init()
{
	// atm do this no matter what playlist we're on since playlist overrides seem to get sent to clients after networkvar registration
	// not nice but whatever lol
	AddCallback_OnRegisteringCustomNetworkVars( FirstPersonSequenceForce1P_RegisterCustomNetworkFunctions )
}

void function FirstPersonSequenceForce1P_InitPlaylistVars()
{
	AddPrivateMatchModeSettingEnum( "#MODE_SETTING_CATEGORY_RIFF", "fp_embark_enabled", [ "#SETTING_DISABLED", "#SETTING_ENABLED" ], "0" )
}

void function FirstPersonSequenceForce1P_RegisterCustomNetworkFunctions()
{
	Remote_RegisterFunction( "ServerCallback_HideHudForFPHackAnim" )
}

#if SERVER
Forced1PSequenceData function FirstPersonSequenceForce1P( FirstPersonSequenceStruct sequence, entity player, entity other = null )
{
Forced1PSequenceData cleanupData
/*
Here For Development Purposes And To See What Model The Player Was Using If The Server Crashes Because Of The Model
*/
if ( player.IsPlayer() )
printt("[FirstPersonExecution] " + player.GetPlayerName() + "'s Model " + player.GetModelName() )
if ( player.IsNPC() )
printt("[FirstPersonExecution] " + player.GetTitle() + "'s Model " + player.GetModelName() )
if( player.IsPlayer() )
{
	string attachment = FORCE1P_PILOT_1P_ATTACHMENT
	string hiddenBodygroup = FORCE1P_PILOT_1P_HIDDEN_BODYGROUP
	string entityclass = FORCE1P_PILOT_ENTITYCLASS

	if ( player.IsTitan() )
	{
		attachment = FORCE1P_TITAN_1P_ATTACHMENT
		hiddenBodygroup = FORCE1P_TITAN_1P_HIDDEN_BODYGROUP	
		entityclass	= FORCE1P_TITAN_ENTITYCLASS
	}
			
	// hide player from everyone, unlike VisibilityFlags, this won't hide children, which is way easier to deal with
    player.Hide()

	Forced1PSequenceData cleanupData
	cleanupData.player = player
	
	// for some melee sequences, player.GetAngles() will be the angles the player had before they began the melee, which can cause desyncs
	// eyeangles are fine though
	vector angles = player.GetAngles()
	angles.y = player.EyeAngles().y
    int maxyaw = 359
	// create the first proxy entity, this should visually be identical to the player, but only visible to them, and with head/torso hidden
	// this is an npc because some firstpersonsequences use animation features that only work on npcs and pilots, not props, so need to do this
	entity ownerProxy
	if( entityclass != "npc_titan" )
	ownerProxy = CreateEntity( entityclass )
	if( entityclass == "npc_titan" )
	{
	ownerProxy = CreateNPCTitan( player.GetPlayerSettings(), player.GetTeam(), < 0, 0, 0 >, < 0, 0, 0 > )
	}
   if( IsValid( ownerProxy ) )
   {
    if( ownerProxy.GetModelName() != player.GetModelName() )
	ownerProxy.SetModel( player.GetModelName() )
	ownerProxy.SetOrigin( player.GetOrigin() )
	if( Distance( angles, angles ) < maxyaw ) // Crashes server if yaw is over 360
	{
	ownerProxy.SetAngles( angles )
	}
	ownerProxy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_OWNER
	ownerProxy.kv.solid = 0 // nonsolid
	SetTeam( ownerProxy, player.GetTeam() )
	ownerProxy.SetOwner( player )
	ownerProxy.SetSkin( player.GetSkin() )
	ownerProxy.SetCamo( player.GetCamo() )
	ownerProxy.SetDecal( player.GetDecal() )
	DispatchSpawn( ownerProxy )
    if( ownerProxy.GetModelName() != player.GetModelName() )
	ownerProxy.SetModel( player.GetModelName() )
	ownerProxy.SetInvulnerable()
    ownerProxy.EnableNPCFlag( NPC_IGNORE_ALL )
    NPC_NoTarget( ownerProxy )
	SetTeam( ownerProxy, player.GetTeam() )
	ownerProxy.SetSkin( player.GetSkin() )
	ownerProxy.SetCamo( player.GetCamo() )
	ownerProxy.SetDecal( player.GetDecal() )
	if( player.IsTitan() )
    {
	entity ownerProxysoul = ownerProxy.GetTitanSoul()
	if( IsValid( ownerProxysoul ) )
	ownerProxysoul.SetShieldHealth( ownerProxysoul.GetShieldHealthMax() )
	}
	HideName( ownerProxy )

	int bodygroupValue = 1
	if ( hiddenBodygroup == "torso" )
		bodygroupValue = 2
	
	// hide annoying bodygroup
    if( player.GetModelName() != $"models/robots/spectre/imc_spectre.mdl" && player.GetModelName() != $"models/titans/buddy/titan_buddy.mdl")
	ownerProxy.SetBodygroup( ownerProxy.FindBodyGroup( hiddenBodygroup ), bodygroupValue )
   }
	// don't play anim until later so we can do cleanup stuff
	cleanupData.ownerProxy = ownerProxy
		
	// create the second proxy entity, this visible to everyone else
	entity thirdPersonProxy
	if( entityclass != "npc_titan" )
	thirdPersonProxy = CreateEntity( entityclass )
	if( entityclass == "npc_titan" )
	{
	thirdPersonProxy = CreateNPCTitan( player.GetPlayerSettings(), player.GetTeam(), < 0, 0, 0 >, < 0, 0, 0 > )
	}
   if( IsValid( thirdPersonProxy ) )
   {
    if( thirdPersonProxy.GetModelName() != player.GetModelName() )
	thirdPersonProxy.SetModel( player.GetModelName() )
	thirdPersonProxy.SetOrigin( player.GetOrigin() )
	if( Distance( angles, angles ) < maxyaw ) // Crashes server if yaw is over 360
	{
	thirdPersonProxy.SetAngles( angles )
	}
	thirdPersonProxy.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE & ~ENTITY_VISIBLE_TO_OWNER
	thirdPersonProxy.kv.solid = 0 // nonsolid
	SetTeam( thirdPersonProxy, player.GetTeam() )
	thirdPersonProxy.SetOwner( player )
	thirdPersonProxy.SetSkin( player.GetSkin() )
	thirdPersonProxy.SetCamo( player.GetCamo() )
	thirdPersonProxy.SetDecal( player.GetDecal() )
	DispatchSpawn( thirdPersonProxy	)
	if( thirdPersonProxy.GetModelName() != player.GetModelName() )
	thirdPersonProxy.SetModel( player.GetModelName() )
	thirdPersonProxy.SetInvulnerable()
    thirdPersonProxy.EnableNPCFlag( NPC_IGNORE_ALL )
    NPC_NoTarget( thirdPersonProxy )
    SetTeam( thirdPersonProxy, player.GetTeam() )
	thirdPersonProxy.SetSkin( player.GetSkin() )
	thirdPersonProxy.SetCamo( player.GetCamo() )
	thirdPersonProxy.SetDecal( player.GetDecal() )
	if( player.IsTitan() )
    {
	entity thirdPersonProxysoul = ownerProxy.GetTitanSoul()
	if( IsValid( thirdPersonProxysoul ) )
	thirdPersonProxysoul.SetShieldHealth( thirdPersonProxysoul.GetShieldHealthMax() )
	}
	HideName( thirdPersonProxy )
	if ( player.IsTitan() )
		Highlight_SetEnemyHighlight( thirdPersonProxy, "enemy_titan" )
	else
		Highlight_SetEnemyHighlight( thirdPersonProxy, "enemy_player" )

        if ( player.IsTitan() )
        {
	    DisableTitanRodeo( thirdPersonProxy )
        DisableTitanRodeo( ownerProxy )
        }
    thread SetBodyGroups( player, thirdPersonProxy )
	FirstPersonPlayAnim( sequence, thirdPersonProxy, player, other )
   }
   cleanupData.thirdPersonProxy = thirdPersonProxy
	
	// create the viewpoint entity
	if ( player.IsPlayer() ) // Check if the victim is an NPC
	{
		entity camera = CreateEntity( "point_viewcontrol" )
		if( IsValid( ownerProxy ) )
		camera.SetParent( ownerProxy, attachment )
		camera.kv.spawnflags = 56
		DispatchSpawn( camera )
		player.SetViewEntity( camera, true )
		cleanupData.camera = camera
		if( player.GetModelName() == $"models/titans/buddy/titan_buddy.mdl" )
		camera.SetOrigin( <52, 0, -22> )
		if( player.GetModelName() == $"models/robots/spectre/imc_spectre.mdl" )
		camera.SetOrigin( <3, 0, 0> )
	}

	// note for potential thing that could be done
	// entity e = CreatePropDynamic($"models/weapons/arms/pov_titan_light_cockpit.mdl"); e.SetParent(GetPlayerArray()[0].GetPetTitan(), "HATCH_HEAD"); e.SetOrigin(<0.75,0,-195>)
	// this is so we get a cockpit in these anims, issue with it is that the cockpit seems to break alot of rendering stuff
	// which really sucks since it'd be awesome to have a cockpit over these anims, really makes them better, even the client func to render through cockpits doesn't seem to work for it, just makes stuff rendering through the cockpit invisible rather than rendering in a broken way
	
	if ( player.IsPlayer() ) // Check if the victim is an NPC
		Remote_CallFunction_NonReplay( player, "ServerCallback_HideHudForFPHackAnim" )
	// play this anim now, so we can cleanup after it's done
	thread CleanupForced1PSequenceAfterAnimDone( sequence, ownerProxy, other, cleanupData )
}
return cleanupData
}

void function CleanupForced1PSequenceAfterAnimDone( FirstPersonSequenceStruct sequence, entity player, entity other, Forced1PSequenceData cleanupData )
{
    if( !IsValid( player ) )
	return
    player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnAnimationInterrupted" )
    cleanupData.player.EndSignal( "OnDeath" )
	cleanupData.player.EndSignal( "OnDestroy" )
	cleanupData.player.EndSignal( "OnAnimationInterrupted" )
	OnThreadEnd( function() : ( cleanupData )
	{
			CleanupForced1PSequence( cleanupData )
	})
	FirstPersonPlayAnim( sequence, player, cleanupData.player, other )
	WaitFrame()
	while( player.Anim_IsActive() )
	WaitFrame()
}

void function CleanupForced1PSequence( Forced1PSequenceData cleanupData )
{
    if( IsValid( cleanupData.player ) )
	{
	cleanupData.player.Show()
	cleanupData.player.ClearViewEntity()
	ClearPlayerAnimViewEntity( cleanupData.player )
	}
	if( IsValid( cleanupData.camera ) )
	cleanupData.camera.Destroy()
	if( IsValid( cleanupData.ownerProxy ) )
	cleanupData.ownerProxy.Destroy()
	if( IsValid( cleanupData.thirdPersonProxy ) )
	cleanupData.thirdPersonProxy.Destroy()
}

void function SetBodyGroups( entity player, entity proxy )
{
player.EndSignal( "OnDestroy" )
proxy.EndSignal( "OnDestroy" )
player.EndSignal( "OnDeath" )
proxy.EndSignal( "OnDeath" )
 while( true )
 {
  proxy.SetFullBodygroup( player.GetFullBodygroup() )
  WaitFrame()
 }
}

void function FirstPersonPlayAnim( FirstPersonSequenceStruct sequence, entity proxy, entity player, entity other )
{
 bool saveednoparent = sequence.noParent
 string savedattachment = sequence.attachment
 bool saveduseanimatedrefattachment = sequence.useAnimatedRefAttachment
 if( !IsPlayerEmbarking( player ) ) // Player Embarks Need To Have The Parent Be The Titan
 {
 sequence.noParent = false
 sequence.attachment = "REF"
 sequence.useAnimatedRefAttachment = true
 thread FirstPersonSequence( sequence, proxy, player )
 }
 else
 thread FirstPersonSequence( sequence, proxy, other )
 sequence.noParent = saveednoparent
 sequence.attachment = savedattachment
 sequence.useAnimatedRefAttachment = saveduseanimatedrefattachment
}
#endif

#if CLIENT
void function ServerCallback_HideHudForFPHackAnim()
{
	// these functions just set hud positions to infront of/behind the camera, manually set them up here so they'll be far enough away so we don't see them in these anims
	// in an ideal world we wouldn't even have to turn off this rui stuff because it would be parented to our camera but unfortunately we do not live in an ideal world
	int ruiDrawIsEnabled = GetConVarInt( "rui_drawEnable" )
	if( ruiDrawIsEnabled == 0 )
	return
    SetConVarInt( "rui_drawEnable", 0 )	
	thread EnableHudOnViewRestored( ruiDrawIsEnabled )
}

void function EnableHudOnViewRestored( int ruiDrawIsEnabled = 1 )
{
	while ( GetViewEntity() != GetLocalClientPlayer() )
		WaitFrame()
	SetConVarInt( "rui_drawEnable", ruiDrawIsEnabled )
}
#endif