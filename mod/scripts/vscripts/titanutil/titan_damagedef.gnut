// this file is used for handling hit_scan modded weapon's damageSourceID
global function Modded_TitanWeapon_DamageDef_Init

void function Modded_TitanWeapon_DamageDef_Init()
{
    #if SERVER
        // handled by projectile.ProjectileSetDamageSourceID()
        //AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_sticky_40mm, DamageSource_40mm ) 
        //AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_salvo_rockets, DamageSource_Shoulder_Grenade )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_flightcore_rockets, DamageSource_Multi_Cluster )
        AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_sniper, DamageSource_Arc_Cannon )
        AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_vortex_shield, DamageSource_Emp_Volley )
        // handled by projectile.ProjectileSetDamageSourceID()
        //AddDamageCallbackSourceID( eDamageSourceId.mp_titanweapon_stun_laser, DamageSource_Arc_Ball )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_titancore_flame_wave, DamageSource_Core_Emp )
    #endif
}

/* // handled by projectile.ProjectileSetDamageSourceID()
void function DamageSource_40mm( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanweapon_40mm, "atlas_40mm", false, true )
}

void function DamageSource_Shoulder_Grenade( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanweapon_shoulder_grenade, "brute4_grenade_launcher", false, true )
}

void function DamageSource_Multi_Cluster( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanweapon_multi_cluster, "brute4_barrage_core_launcher", false, true )
}
*/

void function DamageSource_Arc_Cannon( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanweapon_arc_cannon, "arc_cannon", true, false )
}

void function DamageSource_Emp_Volley( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanability_arc_field, "shock_shield", true, false )
}

/* // handled by projectile.ProjectileSetDamageSourceID()
void function DamageSource_Arc_Ball( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.charge_ball, "charge_ball", false, true )
}

void function DamageSource_Core_Emp( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titancore_emp, "storm_core", false, true )
}
*/

void function OnDamagedTarget_ModdedWeapon( var damageInfo, int damageSourceID, string hopup, bool isWeapon, bool isProjectile )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !IsValid( attacker ) )
		return
    
    if( isProjectile )
    {
        entity inflictor = DamageInfo_GetInflictor( damageInfo )
        if( !IsValid( inflictor ) )
            return
        if( !inflictor.IsProjectile() )
            return

        array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior
        if( mods.contains( hopup ) )
            DamageInfo_SetDamageSourceIdentifier( damageInfo, damageSourceID )
    }

    if( isWeapon )
    {
        entity weapon = DamageInfo_GetWeapon( damageInfo )
        if( !IsValid( weapon ) )
            return

        if( weapon.HasMod( hopup ) )
            DamageInfo_SetDamageSourceIdentifier( damageInfo, damageSourceID )
    }
}