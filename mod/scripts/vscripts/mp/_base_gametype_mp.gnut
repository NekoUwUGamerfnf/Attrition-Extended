untyped
global function BaseGametype_Init_MPSP
global function CodeCallback_OnClientConnectionStarted
global function CodeCallback_OnClientConnectionCompleted
global function CodeCallback_OnClientDisconnected
global function CodeCallback_OnPlayerRespawned
global function CodeCallback_OnPlayerKilled
global function DecideRespawnPlayer
global function RespawnAsPilot
global function RespawnAsTitan
global function TryGameModeAnnouncement

global function SetKillcamsEnabled
global function KillcamsEnabled
global function SetPlayerDeathsHidden
global function TrackTitanDamageInPlayerGameStat

global function ShouldEntTakeDamage_SPMP
global function GetTitanBuildTime
global function TitanPlayerHotDropsIntoLevel

global function SetRecalculateRespawnAsTitanStartPointCallback

// I want my game to have this
global function SetPlayerCameraToIntermissionCam // shared

global function IsPlayerDeathsHidden // new added

global function SetPlayerRespawnForced
global function ForcedRespawn_AddDisabledDamageSourceID // add a damageSourceId that won't trigger forced respawn
global function ForcedRespawn_SetDisabledForPlayer // disable forced respawn for certain player
global function SetLateJoinRespawnEnabled

global function SetGamemodeAnnouncementEnabled

global function SetDeathCamLengthForced
global function GetForcedDeathCamLength // shared with _utility_shared.nut
global function SetReplayStartDelayOverride // only gets applied when death cam modified!

global function SetDeathHintsEnabled
global function SetDeathHintsInterval // how many deaths needed for a death hint to show

global function CalculateTitanDamageTaken

struct 
{
	bool killcamsEnabled = true
	bool playerDeathsHidden = false
	int titanDamageGameStat = -1
	
	entity intermissionCamera
	array<entity> specCams

	entity functionref( entity player, entity basePoint ) recalculateRespawnAsTitanStartPointCallback
	
	// modified
	bool forcedRespawn = true
	array<int> disableForcedRespawnDamageSourceIDs
	table<entity, bool> playerDisableForcedRespawn

	bool enableLateRespawn = true
	array<string> respawnedPlayerUIDs = []
	bool enableGamemodeAnnouncement = true

	// death cam modifier
	float forcedDeathCamLength = -1
	float replayStartDelayOverride = -1

	bool deathHintsEnabled = true
	table<entity, float> playerDeathHintAllowedTime
	int deathHintsInterval = 60
} file

void function BaseGametype_Init_MPSP()
{
	AddSpawnCallback( "info_intermission", SetIntermissionCamera )

	AddPostDamageCallback( "player", AddToTitanDamageStat )
	AddPostDamageCallback( "npc_titan", AddToTitanDamageStat )
	
	AddCallback_OnNPCKilled( CheckForAutoTitanDeath )
	AddCallback_OnPlayerKilled( CheckForAutoTitanDeath )

	RegisterSignal( "PlayerRespawnStarted" )
	RegisterSignal( "KillCamOver" )
}

void function SetIntermissionCamera( entity camera )
{
	file.intermissionCamera = camera
}

void function CodeCallback_OnClientConnectionStarted( entity player )
{
	// not a real player?
	#if DEV
	if ( player.GetPlayerName() == "Replay" )
		return
	#endif

	if ( IsLobby() )
	{
		Lobby_OnClientConnectionStarted( player )
		return
	}

//	ScreenFade( player, 0, 0, 0, 255, 2.0, 0.5, FFADE_IN | FFADE_PURGE )

	SetTargetName( player, "player" + player.entindex() )

	player.p.controllableProjectiles_scriptManagedID = CreateScriptManagedEntArray()
	player.p.npcFollowersArrayID = CreateScriptManagedEntArray()

	player.s = {}
	player.s.attackerInfo <- {}
	player.p.clientScriptInitialized = player.IsBot()
	player.s.inPostDeath <- null
	player.s.respawnCount <- 0
	player.s.respawnTime <- 0
	player.s.lostTitanTime <- 0
	player.s.cloakedShotsAllowed <- 0
	player.s.startDashMeleeTime <- 0
	player.s.respawnSelectionDone <- true  // this gets set to false in postdeaththread but we need it to be true when connecting
	player.s.waveSpawnProtection <- false

	player.s.nextStatUpdateFunc <- null

	player.s.activeTrapArrayId <- CreateScriptManagedEntArray()

	player.s.restartBurnCardEffectOnSpawn <- false
	player.s.replacementDropInProgress <- false

	player.s.inGracePeriod <- true

	// should I just add these when playing coop?
	player.s.usedLoadoutCrate <- false
	player.s.restockAmmoTime <- 0
	player.s.restockAmmoCrate <- null

	player.s.autoTitanLastEngageCalloutTime <- 0
	player.s.autoTitanLastEngageCallout <- null
	player.s.lastAIConversationTime <- {} // when was a conversation last played?

	player.s.updatedPersistenceOnDisconnect <- false

	player.s.lastFriendlySpawnedOn <- null
	player.s.nextWaveSpawnTime <- 0.0

	player.s.meleeSlowMoEndTime <- 0.0
	
	player.p.connectTime = Time()

	// modified
	file.playerDeathHintAllowedTime[ player ] <- 0.0

	Assert( !player._entityVars )
	InitEntityVars( player )

	// Added via AddCallback_OnClientConnecting
	foreach ( callbackFunc in svGlobal.onClientConnectingCallbacks )
	{
		callbackFunc( player )
	}

	printl( "Player connect started: " + player + "---UID:" + player.GetUID() )
	
	InitPassives( player )
}

// playerconnected
void function CodeCallback_OnClientConnectionCompleted( entity player )
{
	InitPersistentData( player ) // defensive fix

	if ( IsLobby() )
	{
		Lobby_OnClientConnectionCompleted( player )
		return
	}

	player.hasConnected = true

	InitMeleeAnimEventCallbacks( player )
	ZiplineInit( player )
	
	UpdateMinimapStatus( player )
	UpdateMinimapStatusToOtherPlayers( player )
	MinimapPlayerConnected( player )
	NotifyClientsOfConnection( player, 1 )
	PlayCurrentTeamMusicEventsOnPlayer( player )
	SetCurrentTeamObjectiveForPlayer( player )

	entity skycam = GetEnt( "skybox_cam_level" )
	if ( skycam != null )
		player.SetSkyCamera( skycam )

	FinishClientScriptInitialization( player )

	// Added via AddCallback_OnClientConnected
	foreach ( callbackFunc in svGlobal.onClientConnectedCallbacks )
		callbackFunc( player )

	if ( !Flag( "PlayerDidSpawn") )
		__PlayerDidSpawn( player )

	svGlobal.levelEnt.Signal( "PlayerDidSpawn", { player = player } )

	if ( GetConVarBool( "ns_allow_spectators" ) )
	{
		if ( IsPrivateMatchSpectator( player ) )
		{
			InitialisePrivateMatchSpectatorPlayer( player )
			return
		}
	}
	else
		player.SetPersistentVar( "privateMatchState", 0 )

	// handle spawning late joiners
	HandleRespawningLateJoiners( player )
}

void function HandleRespawningLateJoiners( entity player )
{
	// handle spawning late joiners
	if ( GetGameState() == eGameState.Playing )
	{
		bool connectingRespawned = false
		if ( RespawnsEnabled() )
		{
			ClearRespawnAvailable( player ) // need so the respawn icon doesn't show
			// likely temp, deffo needs some work
			if ( Riff_SpawnAsTitan() == 1 )	// spawn as titan
				thread RespawnAsTitan( player )
			else // spawn as pilot
				RespawnAsPilot( player )
			connectingRespawned = true
		}
		else // may not be useful, just want to make dedicated servers better
		{
			bool shouldDoLateSpawn = false

			if( GetPlayerArrayOfTeam( player.GetTeam() ).len() <= 1 )
				shouldDoLateSpawn = true
			else if( !file.respawnedPlayerUIDs.contains( player.GetUID() ) ) // avoid multiple late spawns by disconnecting
				shouldDoLateSpawn = true

			// do this so player don't have to wait so long till round end
			if( shouldDoLateSpawn && IsLateJoinRespawnEnabled() ) // never try to respawn if this mechanic is disabled manually
			{
				if ( Riff_SpawnAsTitan() == 1 )	// spawn as titan
					thread RespawnAsTitan( player )
				else // spawn as pilot
					RespawnAsPilot( player )
				connectingRespawned = true
			}
			else
				thread PlayerBecomesSpectator( player )
		}
		if( connectingRespawned )
			thread DelayedGamemodeAnnouncement( player )
	}
	else if ( GetGameState() == eGameState.Epilogue || GetGameState() == eGameState.SuddenDeath )// don't know why northstar not handling these
		thread PlayerBecomesSpectator( player )
}

void function DelayedGamemodeAnnouncement( entity player )
{
	player.EndSignal( "OnDestroy" )
	
	if( !IsAlive( player ) )
		player.WaitSignal( "OnRespawned" )
	wait 1 // vanilla behavior: wait for player screen fade from black, then do a announcement
	if ( GetGameState() == eGameState.Playing )
		TryGameModeAnnouncement( player )
}

void function CodeCallback_OnClientDisconnected( entity player, string reason )
{
	if ( IsLobby() )
	{
		player.Signal( "_disconnectedInternal" )
		UpdateBadRepPresent()
		return
	}

	if ( !player.hasConnected )
		return

	// Added via AddCallback_OnClientDisconnected
	foreach ( callbackFunc in svGlobal.onClientDisconnectedCallbacks )
	{
		callbackFunc( player )
	}

	player.Disconnected()
	player.p.isDisconnected = true
	player.CleanupMPClasses()
}

void function CodeCallback_OnPlayerRespawned( entity player )
{
	ClearPlayerEliminated( player ) // mark as player not eliminated

	SetHumanRagdollImpactTable( player )
	
	player.s.inGracePeriod = true // defensive fix
	player.s.respawnCount++
	player.s.respawnTime = Time()
	ClearRecentDamageHistory( player )

	// HACKED DEATH, before loadout grace period set up
	if( HackedDeath_IsEnabled() )
		HackedDeath_PlayerRecoverFrom( player )
	//player.ClearReplayDelay() // these has been done in CPlayer::RespawnPlayer()
	//player.ClearViewEntity()
	
	player.Signal( "OnRespawned" ) // kill any postdeaththreads that could be running
	
	Loadouts_TryGivePilotLoadout( player )

	// loadout grace period
	if( IsLoadoutGracePeriodEnabled() )
		GracePeriodThink( player ) // grace period done here
	else
	{
		player.s.inGracePeriod = false // disable this immediately
		player.Signal( "GracePeriodDone" )
	}
	//player.SetPredictionEnabled( true ) doesn't seem needed, as native code seems to set this
	
	// always don't let them to do another late respawn if they once respawned
	if( !file.respawnedPlayerUIDs.contains( player.GetUID() ) )
		file.respawnedPlayerUIDs.append( player.GetUID() )

	foreach ( entity weapon in player.GetMainWeapons() )
		weapon.SetProScreenOwner( player )
		
	foreach ( void functionref( entity ) callback in svGlobal.onPlayerRespawnedCallbacks )
		callback( player )
		
	Remote_CallFunction_NonReplay( player, "ServerCallback_YouRespawned" )
	ClearLastAttacker( player ) // so dying to anything doesn't credit the same attacker after respawning
}

void function GracePeriodThink( entity player )
{
	thread GracePeriodThink_Threaded( player )
}

void function GracePeriodThink_Threaded( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnPrimaryAttack" )
	player.EndSignal( "OnDeath" )
	player.EndSignal( "PlayerEmbarkedTitan" )

	OnThreadEnd(
		function(): ( player )
		{
			if( IsValid( player ) )
			{
				if( IsAlive( player ) && GetGameState() == eGameState.Playing ) // if player died we don't reset this( mostly because round end )
				{
					player.s.inGracePeriod = false
					player.Signal( "GracePeriodDone" )
				}
			}
		}
	)

	wait CLASS_CHANGE_GRACE_PERIOD // max duration
}

void function CodeCallback_OnPlayerKilled( entity player, var damageInfo )
{
	PlayerOrNPCKilled( player, damageInfo )
	HandleDeathPackage( player, damageInfo )
	thread PostDeathThread_MP( player, damageInfo )
}

void function PostDeathThread_MP( entity player, var damageInfo ) // based on gametype_sp: postdeaththread_sp
{
	if ( player.s.inPostDeath )
		return

	float timeOfDeath = Time()
	player.p.postDeathThreadStartTime = Time()

	Assert( IsValid( player ), "Not a valid player" )
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnRespawned" )

	player.p.deathOrigin = player.GetOrigin()
	player.p.deathAngles = player.GetAngles()

	player.s.inPostDeath = true

	if( HackedDeath_IsEnabled() ) // prevent players reset their class after hacked death
		player.s.inGracePeriod = false
	else
		player.s.inGracePeriod = true // make sure player always in GracePeriod after respawn
	player.s.respawnSelectionDone = false

	player.cloakedForever = false
	player.stimmedForever = false

	if( HackedDeath_IsEnabled() )
	{
		player.SetNoTarget( true )
		player.SetNoTargetSmartAmmo( true )
		player.s.hackedDeath = true
	}
	else
	{
		player.SetNoTarget( false )
		player.SetNoTargetSmartAmmo( false )
	}
	player.ClearExtraWeaponMods()
	
	// disable prediction to prevent it messing with ragdoll in some places, as well as killreplay and such
	player.SetPredictionEnabled( false )
	
	if ( player.IsTitan() )
		SoulDies( player.GetTitanSoul(), damageInfo ) // cleanup some titan stuff, no idea where else to put this
	
	ClearRespawnAvailable( player )

	OnThreadEnd( function() : ( player )
	{
		if ( !IsValid( player ) )
			return
	
		player.s.inPostDeath = false
	})

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	int methodOfDeath = DamageInfo_GetDamageSourceIdentifier( damageInfo )

	// northstar missing, fix for projectile kill replay
	entity inflictor = DamageInfo_GetInflictor( damageInfo )
	int inflictorEHandle = -1
	if ( IsValid( inflictor ) )
	{
		if ( inflictor.IsProjectile() && inflictor.GetProjectileWeaponSettingBool( eWeaponVar.projectile_killreplay_enabled ) )
			inflictorEHandle = inflictor.GetEncodedEHandle()
	}
	// northstar messed up
	int attackerIndex = -1

	table<int, bool> alreadyAssisted
	if ( IsValid( attacker ) ) 
	{
		if ( !player.IsTitan() ) // titan assist handled by ScoreEvent_TitanKilled()
		{
			foreach( DamageHistoryStruct attackerInfo in player.e.recentDamageHistory )
			{
				if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == player )
					continue

				bool exists = attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ? true : false
				if( attackerInfo.attacker != attacker && !exists )
				{
					alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true
					Remote_CallFunction_NonReplay( attackerInfo.attacker, "ServerCallback_SetAssistInformation", attackerInfo.damageSourceId, attacker.GetEncodedEHandle(), player.GetEncodedEHandle(), attackerInfo.time ) 
					AddPlayerScore( attackerInfo.attacker, "PilotAssist", player )
					attackerInfo.attacker.AddToPlayerGameStat( PGS_ASSISTS, 1 )
				}
			}
		}

		if( attacker.IsPlayer() )	
			Highlight_SetDeathRecapHighlight( attacker, "killer_outline" )

		// fix for replay
		if ( inflictorEHandle == -1 ) // invalid ehandle!
			inflictorEHandle = attacker.GetEncodedEHandle() // just assign attacker as inflictor!
		attackerIndex = attacker.GetIndexForEntity()
	}

	player.p.rematchOrigin = player.p.deathOrigin
	if ( IsValid( attacker ) && methodOfDeath == eDamageSourceId.titan_execution )
	{
		// execution can throw you out of the map
		player.p.rematchOrigin = attacker.GetOrigin()
	}

	// add deathHint on respawn
	bool showDeathHints = file.deathHintsEnabled && ( Time() > file.playerDeathHintAllowedTime[ player ] )
	if ( showDeathHints )
	{
		ShowDeathHint( player, damageInfo )
		file.playerDeathHintAllowedTime[ player ] = Time() + file.deathHintsInterval // update interval
	}

	// clean up player's parents
	player.Signal( "RodeoOver" )
	player.ClearParent()
	
	// do some pre-replay stuff if we're gonna do a replay
	float replayLength = CalculateLengthOfKillReplay( player, methodOfDeath )
	bool shouldDoReplay = Replay_IsEnabled() && KillcamsEnabled() && IsValid( attacker ) && ShouldDoReplay( player, attacker, replayLength, methodOfDeath )
	table replayTracker = { validTime = null }
	if ( shouldDoReplay )
		thread TrackDestroyTimeForReplay( attacker, replayTracker )
	
	player.StartObserverMode( OBS_MODE_DEATHCAM )
	if ( ShouldSetObserverTarget( attacker ) )
		player.SetObserverTarget( attacker )
	else
		player.SetObserverTarget( null )
	
	if ( ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue ) && !file.playerDeathsHidden )
		player.AddToPlayerGameStat( PGS_DEATHS, 1 )
	
	// fuck respawn why leaving a annying death sound
	if ( !file.playerDeathsHidden )
		Remote_CallFunction_NonReplay( player, "ServerCallback_YouDied", attacker.GetEncodedEHandle(), GetHealthFrac( attacker ), methodOfDeath )

	// modified function
	float deathcamLength = GetDeathCamLength( player )
	wait deathcamLength

	// modified over here, add support for modified death cam length
	float actualDeathCamLength = GetDeathCamLength( player, true ) // this gets the death cam length that ignores custom settings
	bool deathCamModified = actualDeathCamLength > deathcamLength
	float replayStartDelay = actualDeathCamLength - deathcamLength // in case we're not in good death cam length
	if ( deathCamModified && file.replayStartDelayOverride != -1 ) // replay start delay modified. only apply when deathCamModified!
		replayStartDelay = file.replayStartDelayOverride
	if ( replayStartDelay < 0 ) // defensive fix
		replayStartDelay = 0
	// HACKED DEATH: never delay replay
	if( HackedDeath_IsEnabled() )
		replayStartDelay = 0
	//

	// hack: double check if killcams are enabled and valid here in case gamestate has changed this
	//shouldDoReplay = shouldDoReplay && Replay_IsEnabled() && KillcamsEnabled() && IsValid( attacker )
	// fix for replay
	shouldDoReplay = shouldDoReplay && Replay_IsEnabled() && KillcamsEnabled() && inflictorEHandle != -1 && attackerIndex != -1
	// quick note: in cases where player.Die() is called: e.g. for round ends, player == attacker
	if ( shouldDoReplay )
	{
		player.watchingKillreplayEndTime = Time() + replayLength		
		float beforeTime = GetKillReplayBeforeTime( player, methodOfDeath )
		
		replayTracker.validTime <- null 
		
		float respawnTime = Time() - 2 // seems to get the killreplay to end around the actual kill
		if ( "respawnTime" in attacker.s )
			respawnTime = Time() - expect float ( attacker.s.respawnTime )

		// modified over here, add support for modified death cam length
		//thread PlayerWatchesKillReplayWrapper( player, attacker, respawnTime, timeOfDeath, beforeTime, replayTracker )		
		// try to do delayed replay
		thread DelayedPlayerWatchesKillReplayWrapper( player, inflictorEHandle, attackerIndex, respawnTime, timeOfDeath, beforeTime, replayTracker, replayStartDelay )
	}

	// BecomeRagdoll() seems weird with short deathCam
	// now setting these in DoRespawnPlayer() to prevent crash
	//player.SetPlayerSettings( "spectator" ) // prevent a crash with going from titan => pilot on respawn
	//player.StopPhysics() // need to set this after SetPlayerSettings
	if ( !deathCamModified )
		PlayerClassChangeToSpectator( player )

	if ( RespawnsEnabled() )
	{
		// is it a good idea to do respawn code in postdeaththread? fuck if i know lol
		float respawnDelay = max( 0, GetCurrentPlaylistVarFloat( "respawn_delay", 0.0 ) - deathcamLength )
	
		print( "respawn delay " + respawnDelay )
		
		UpdateNextRespawnTime( player, Time() + respawnDelay )
		SetRespawnAvailable( player )
		
		wait respawnDelay

		// new intermission cam system
		if( ShouldForceRespawnPlayer_FromDamageInfo( player, methodOfDeath ) )
		{
			float waitBeforeRespawn = 0.0
			//if( !shouldDoReplay || respawnDelay >= 3.0 ) // doing this so player can respawn as titan in some modes, but vanilla don't features this lol
			if( !shouldDoReplay )
			{
				waitBeforeRespawn = 3.0 - respawnDelay
				if( waitBeforeRespawn <= 0 )
					waitBeforeRespawn = 0
				// modified over here, add support for modified death cam length
				float interMissionCamDelay = waitBeforeRespawn + 0.1
				if ( deathCamModified )
					interMissionCamDelay += replayStartDelay
				thread SetPlayerCameraToIntermissionCam( player, interMissionCamDelay )
			}
			thread ForcedRespawnThink( player, waitBeforeRespawn, deathCamModified, replayStartDelay )// if not doing replay, set player's camera to intermissionCam
		}

		// HACKED DEATH
		if( HackedDeath_IsEnabled() )
		{
			if( !ShouldForceRespawnPlayer_FromDamageInfo( player, methodOfDeath ) ) // really kill player to enable respawn button
				HackedDeath_KillPlayer( player )
			player.UnfreezeControlsOnServer() // unfreeze controls here, make players able to press respawn
		}
		//

		player.WaitSignal( "RespawnMe" ) // set in base_gametype: ClientCommand_RespawnPlayer

		// HACKED DEATH: defensive fix for hacked death, kill player if they're not actual dead, so they can respawn
		if( respawnDelay > 0 && HackedDeath_IsEnabled() && ShouldForceRespawnPlayer_FromDamageInfo( player, methodOfDeath ) )
		{
			HackedDeath_KillPlayer( player )
			player.Signal( "RespawnMe" )
		}
		//

		ClearRespawnAvailable( player ) // need so the respawn icon doesn't show for like a frame on next death

		// HACKED DEATH
		if ( HackedDeath_IsEnabled() && !shouldDoReplay ) // wait an extra frame if the player not entered replay, otherwise they'll lose their ability icons
			WaitFrame()
		//

		if ( ( expect bool( player.GetPersistentVar( "spawnAsTitan" ) ) && IsTitanAvailable( player ) ) || ( Riff_SpawnAsTitan() > 0 && Riff_ShouldSpawnAsTitan( player ) ) )	// spawn as titan
			thread RespawnAsTitan( player )
		else // spawn as pilot
			RespawnAsPilot( player )
	}
	else if ( GamePlayingOrSuddenDeath() || GetGameState() == eGameState.Epilogue ) // respawn not valid, handling all situations
	{
		if ( shouldDoReplay && player.IsWatchingKillReplay() )
		{
			SetPlayerEliminated( player ) // allows player to skip replay
			WaitSignal( player, "KillCamOver", "RespawnMe" )
		}

		thread PlayerBecomesSpectator( player )
	}
}

// modified here!!!
void function SetPlayerCameraToIntermissionCam( entity player, float delay = 0 )
{
	if ( delay > 0 )
	{
		player.EndSignal( "OnDestroy" )
		player.EndSignal( "OnDeath" )
		player.EndSignal( "RespawnMe" )
		player.EndSignal( "OnRespawned" )
		player.EndSignal( "PlayerRespawnStarted" )
		//print( "Waiting " + string( delay ) + " s before setting camera" )
		wait delay
	}

	// modified function in _spectator.gnut
	if ( Spectator_IsPlayerSpectating( player ) ) // we never reset player to intermission cam if player is spectating
		return

	if ( file.intermissionCamera != null )
	{
		// player may not become spectator since death cam can be modified
		if ( player.GetPlayerSettings() != "spectator" )
			PlayerClassChangeToSpectator( player )

		//print( "Setting player camera to intermissionCam" )
		player.SetObserverModeStaticPosition( file.intermissionCamera.GetOrigin() )
		player.SetObserverModeStaticAngles( file.intermissionCamera.GetAngles() )
		player.ClearParent() // sometimes they're still parented, do a defensive fix
		if( !IsValid( player.GetParent() ) )
			player.StartObserverMode( OBS_MODE_STATIC_LOCKED )
		player.SetObserverTarget( null )
	}
}

void function PlayerClassChangeToSpectator( entity player )
{
	player.BecomeRagdoll( player.GetVelocity(), true ) // better become ragdoll before setting to spectator, so player won't have spectator class model out
	player.SetPlayerSettings( "spectator" ) 
	player.StopPhysics()
}

void function ForcedRespawnThink( entity player, float waitBeforeRespawn, bool replayHasDelayed = false, float replayStartDelay = 0.0 )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "PlayerRespawnStarted" ) // signaled by RespawnAsTitan()
	table result = {}
	result.repsawnIsForced <- false

	OnThreadEnd(
		function(): ( player, result )
		{
			if( GetGameState() != eGameState.Playing ) // no forced respawn
				return 
			if( IsValid( player ) )
			{
				if( expect bool( result.repsawnIsForced ) ) // reset player's persistent var if respawn is forced
					player.SetPersistentVar( "spawnAsTitan", false )
				player.Signal( "RespawnMe" )
			}
		}
	)
	
	WaitFrame() // wait a frame for player.WaitSignal( "RespawnMe" ) to set up, or maybe put the waitsignal inside this function? rename it to PlayerWaitForRespawn()
	// modified over here, add support for modified death cam length
	if ( replayHasDelayed && !HackedDeath_IsEnabled() ) // hacked death ignores this
	{
		if ( replayStartDelay > 0 )
			wait replayStartDelay // this is actually replayStartDelay
	}
	if( player.IsWatchingKillReplay() )
		player.WaitSignal( "KillCamOver" )

	if( waitBeforeRespawn > 0 )
	{
		// HACKED DEATH
		if( HackedDeath_IsEnabled() )
			HackedDeath_KillPlayer( player )
		else
			wait waitBeforeRespawn
	}
	result.repsawnIsForced = true
}

void function DelayedPlayerWatchesKillReplayWrapper( entity player, int inflictorEHandle, int attackerIndex, float timeSinceAttackerSpawned, float timeOfDeath, float beforeTime, table replayTracker, float delay = 0.0 )
{
	// same end signals as PlayerWatchesKillReplayWrapper()
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "OnRespawned" )
	
	player.EndSignal( "OnDestroy" )
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	//print( "replay start delay is: " + string( delay ) )
	if ( delay > 0 )
		wait delay

	thread PlayerWatchesKillReplayWrapper( player, inflictorEHandle, attackerIndex, timeSinceAttackerSpawned, timeOfDeath, beforeTime, replayTracker )
}
//

//void function PlayerWatchesKillReplayWrapper( entity player, entity attacker, float timeSinceAttackerSpawned, float timeOfDeath, float beforeTime, table replayTracker )
void function PlayerWatchesKillReplayWrapper( entity player, int inflictorEHandle, int attackerIndex, float timeSinceAttackerSpawned, float timeOfDeath, float beforeTime, table replayTracker )
{
	player.EndSignal( "RespawnMe" )
	player.EndSignal( "OnRespawned" )
	
	player.EndSignal( "OnDestroy" )
	
	svGlobal.levelEnt.EndSignal( "GameStateChanged" )
	
	OnThreadEnd
	( 
		function() : ( player ) 
		{	
			// don't clear if we're in a roundwinningkillreplay, or winner determined kill
			if ( IsValid( player ) && !( ( GetGameState() == eGameState.SwitchingSides || GetGameState() == eGameState.WinnerDetermined ) && IsRoundWinningKillReplayEnabled() ) )
			{
				player.Signal( "KillCamOver" )
				player.ClearReplayDelay()
				player.ClearViewEntity()
				SetPlayerCameraToIntermissionCam( player )
				//player.SetPredictionEnabled( true ) doesn't seem needed, as native code seems to set this on respawn
			}
		}
	)

	// have to be spectator before watching kill replay
	if ( player.GetPlayerSettings() != "spectator" )
		PlayerClassChangeToSpectator( player )

	player.SetPredictionEnabled( false )
	//PlayerWatchesKillReplay( player, attacker.GetEncodedEHandle(), attacker.GetIndexForEntity(), timeSinceAttackerSpawned, timeOfDeath, beforeTime, replayTracker )
	PlayerWatchesKillReplay( player, inflictorEHandle, attackerIndex, timeSinceAttackerSpawned, timeOfDeath, beforeTime, replayTracker )
}

void function DecideRespawnPlayer( entity player )
{
	// this isn't even used atm, could likely be removed if some vanilla code didn't rely on it
}

void function RespawnAsPilot( entity player )
{
	DoRespawnPlayer( player, FindSpawnPoint( player, false, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) && !IsFFAGame() ) )
}

void function RespawnAsTitan( entity player, bool manualPosition = false )
{
	if( IsAlive( player ) )
		return

	player.Signal( "PlayerRespawnStarted" )
	// modified
	//player.SetPlayerSettings( "spectator" ) // prevent a crash with going from titan => pilot on respawn
	//player.StopPhysics() // need to set this after SetPlayerSettings
	PlayerClassChangeToSpectator( player )
	
	player.isSpawning = true
	entity spawnpoint = FindSpawnPoint( player, true, ( ShouldStartSpawn( player ) || Flag( "ForceStartSpawn" ) ) && !IsFFAGame() )
	if ( file.recalculateRespawnAsTitanStartPointCallback != null )
		spawnpoint = file.recalculateRespawnAsTitanStartPointCallback( player, spawnpoint )

 	TitanLoadoutDef titanLoadout = GetTitanLoadoutForPlayer( player )
	
	asset model = GetPlayerSettingsAssetForClassName( titanLoadout.setFile, "bodymodel" )
	Attachment warpAttach = GetAttachmentAtTimeFromModel( model, "at_hotdrop_01", "offset", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), 0 )
	PlayFX( TURBO_WARP_FX, warpAttach.position, warpAttach.angle )
		
	entity titan = CreateAutoTitanForPlayer_FromTitanLoadout( player, titanLoadout, spawnpoint.GetOrigin(), spawnpoint.GetAngles() )
	DispatchSpawn( titan )
	// question: how could embark prompt show up when player is dead?
	//player.SetPetTitan( null ) // prevent embark prompt from showing up
	player.SetPetTitan( titan ) // required for marking this player having a pet titan

	ClearRespawnAvailable( player ) // need so the respawn icon doesn't show
	
	AddCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // hide hud
	// do titanfall scoreevent
	if ( !level.firstTitanfall )
	{
		AddPlayerScore( player, "FirstTitanfall", player )

		#if HAS_STATS
		UpdatePlayerStat( player, "misc_stats", "titanFallsFirst" )
		#endif

		level.firstTitanfall = true
	}
	else
	{
		AddPlayerScore( player, "Titanfall", player )
	}
	
	entity camera = CreateTitanDropCamera( spawnpoint.GetAngles(), < 90, titan.GetAngles().y, 0 > )
	camera.SetParent( titan )
	
	// calc offset for spawnpoint angle
	// todo this seems bad but too lazy to figure it out rn
	//vector xyOffset = RotateAroundOrigin2D( < 44, 0, 0 >, < 0, 0, 0>, spawnpoint.GetAngles().y )
	//xyOffset.z = 520 // < 44, 0, 520 > at 0,0,0, seems to be the offset used in tf2
	//print( xyOffset )
	
	vector xyOffset = RotateAroundOrigin2D( < 44, 0, 520 >, < 0, 0, 0 >, spawnpoint.GetAngles().y )
	
	camera.SetLocalOrigin( xyOffset )
	camera.SetLocalAngles( < camera.GetAngles().x, spawnpoint.GetAngles().y, camera.GetAngles().z > ) // this straight up just does not work lol
	camera.Fire( "Enable", "!activator", 0, player )
	
	player.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDestroy" )
	OnThreadEnd( function() : ( player, titan, camera )
	{
		if ( IsValid( player ) )
		{
			RemoveCinematicFlag( player, CE_FLAG_CLASSIC_MP_SPAWNING ) // show hud
			player.isSpawning = false
			ClearTitanAvailable( player ) // we've done everything, considering clear titan available
		}
	
		if ( IsValid( titan ) )
			titan.Destroy() // pilotbecomestitan leaves an npc titan that we need to delete
		else
			RespawnAsPilot( player ) // this is 100% an edgecase, just avoid softlocking if we ever hit it in playable gamestates
			
		camera.Fire( "Disable", "!activator", 0, player )
		camera.Destroy()
	})
	
	waitthread TitanHotDrop( titan, "at_hotdrop_01", spawnpoint.GetOrigin(), spawnpoint.GetAngles(), player, camera ) // do hotdrop anim
		
	// temp fix
	if( IsAlive( player ) )
		return

	player.RespawnPlayer( null ) // spawn player as pilot so they get their pilot loadout on embark
	player.SetOrigin( titan.GetOrigin() )
	
	// don't make player titan when entity batteryContainer is not valid.
	// This will prevent a servercrash that sometimes occur when evac is disabled and somebody is calling a titan in the defeat screen.
	if( IsValid( titan.GetTitanSoul().soul.batteryContainer ) )
		PilotBecomesTitan( player, titan ) // make player titan
	else
		print( "batteryContainer is not a valid entity in RespawnAsTitan(). Skipping PilotBecomesTitan()." )
}

void function TryGameModeAnnouncement( entity player ) // only putting this here because it's here in gametype_sp lol
{
	if ( !file.enableGamemodeAnnouncement ) // modified
		return
	
	Remote_CallFunction_NonReplay( player, "ServerCallback_GameModeAnnouncement" )
	if ( GetRoundsPlayed() < 1 || IsFirstRoundAfterSwitchingSides() ) // only in first round will vanilla game play the dialogue
		PlayFactionDialogueToPlayer( GameMode_GetGameModeAnnouncement( GAMETYPE ), player )
}

void function SetKillcamsEnabled( bool enabled )
{
	file.killcamsEnabled = enabled
}

bool function KillcamsEnabled()
{
	return file.killcamsEnabled
}

void function SetPlayerDeathsHidden( bool hidden )
{
	file.playerDeathsHidden = hidden
}

void function TrackTitanDamageInPlayerGameStat( int playerGameStat )
{
	file.titanDamageGameStat = playerGameStat
}

void function AddToTitanDamageStat( entity victim, var damageInfo )
{
	if ( !victim.IsTitan() || file.titanDamageGameStat == -1 )
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( attacker == victim ) // self damage, no need to run following calculations
		return
	if ( !attacker.IsPlayer() ) // attacker is not a player
		return

	int damageAmount = CalculateTitanDamageTaken( victim, damageInfo )
	if ( damageAmount == 0 )
		return

	attacker.AddToPlayerGameStat( file.titanDamageGameStat, damageAmount )
}

int function CalculateTitanDamageTaken( entity victim, var damageInfo )
{
	if ( !victim.IsTitan() )
		return 0

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( attacker.IsTitan() && attacker.ContextAction_IsActive() ) // attacker as titan is performing an execution
		return 0 // execution may deal huge amount of damage, don't do calculations

	// should check victim's health!!
	int damageAmount = int( DamageInfo_GetDamage( damageInfo ) )
	int healthLeft = victim.GetHealth()
	entity titanSoul = victim.GetTitanSoul()
	float doomedTime = 0.0
	float currentTime = Time()
	if( IsValid( titanSoul ) )
		doomedTime = titanSoul.soul.doomedStartTime

	// since DoomTitan() is done in damaged callback instead of post damage, we can't get undoomed titan's killshot
	if ( GetDoomedState( victim ) )
	{
		// consider this is a undoomed killshot, in _titan_health.gnut HandleKillShot() we set damage to health - 1, should add 1 more to score
		if ( healthLeft - 1 == damageAmount && doomedTime == currentTime ) 
			damageAmount += 1
		// consider this is a doomed killshot, cap to max health
		else if ( healthLeft <= damageAmount )
			damageAmount = healthLeft
	}
	// calculation done!
	return damageAmount
}

void function CheckForAutoTitanDeath( entity victim, entity attacker, var damageInfo )
{
	if ( !IsValid( victim ) || !victim.IsTitan() )
		return

	if ( !victim.IsPlayer() ) // npc titans
	{
		entity owner = victim
		if ( IsValid( GetPetTitanOwner( victim ) ) )
			owner = GetPetTitanOwner( victim )
		//if ( GetPetTitanOwner( victim ) && GetPetTitanOwner( victim ) != attacker ) // messed up!
		if ( owner != attacker ) // no titanKilled obit if owner kill it's titan or titan suicide
		{
			foreach ( player in GetPlayerArray() )
				Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
		}
	}
	else // player titans
	{
		if ( victim != attacker )
		{
			foreach ( player in GetPlayerArray() )
				Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
		}
	}
}

void function SetRecalculateRespawnAsTitanStartPointCallback( entity functionref( entity player, entity basePoint ) callbackFunc )
{
	file.recalculateRespawnAsTitanStartPointCallback = callbackFunc
}

// stuff to change later

bool function ShouldEntTakeDamage_SPMP( entity ent, var damageInfo )
{
	return true
}

float function GetTitanBuildTime(entity player)
{
	return 100.0
}

void function TitanPlayerHotDropsIntoLevel( entity player )
{

}

// modified!!!
bool function IsPlayerDeathsHidden() // new added
{
	return file.playerDeathsHidden
}

void function SetPlayerRespawnForced( bool forced )
{
	file.forcedRespawn = forced
}

void function ForcedRespawn_AddDisabledDamageSourceID( int damageSourceId )
{
	if ( !file.disableForcedRespawnDamageSourceIDs.contains( damageSourceId ) )
		file.disableForcedRespawnDamageSourceIDs.append( damageSourceId )
}

void function ForcedRespawn_SetDisabledForPlayer( entity player, bool disable )
{
	if ( !( player in file.playerDisableForcedRespawn ) )
		file.playerDisableForcedRespawn[ player ] <- false // default value
	file.playerDisableForcedRespawn[ player ] = disable
}

bool function ShouldForceRespawnPlayer()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "ns_forced_respawn", 1 ) == 0 )
		return false

	return file.forcedRespawn
}

bool function ShouldForceRespawnPlayer_FromDamageInfo( entity victim, int methodOfDeath )
{
	if ( !ShouldForceRespawnPlayer() ) // main check
		return false

	// extra checks
	if ( file.disableForcedRespawnDamageSourceIDs.contains( methodOfDeath ) )
		return false

	if ( victim in file.playerDisableForcedRespawn )
		return !file.playerDisableForcedRespawn[ victim ]

	// default value
	return true
}

void function SetLateJoinRespawnEnabled( bool enabled )
{
	file.enableLateRespawn = enabled
}

bool function IsLateJoinRespawnEnabled()
{
	// playlistvar overrides script!
	if ( GetCurrentPlaylistVarInt( "ns_late_join_respawn", 1 ) == 0 )
		return false
	if ( file.enableLateRespawn )
		return true

	return false
}

void function SetGamemodeAnnouncementEnabled( bool enabled )
{
	file.enableGamemodeAnnouncement = enabled
}

void function SetDeathCamLengthForced( float camLength )
{
	file.forcedDeathCamLength = camLength
}

float function GetForcedDeathCamLength()
{
	return file.forcedDeathCamLength
}

void function SetReplayStartDelayOverride( float delay )
{
	file.replayStartDelayOverride = delay
}

void function SetDeathHintsEnabled( bool enabled )
{
	file.deathHintsEnabled = enabled
}

void function SetDeathHintsInterval( int interval )
{
	file.deathHintsInterval = interval
}