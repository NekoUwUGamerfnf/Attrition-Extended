// basically a copy of gruntmode. with only npcs spawns, players are still pilots

untyped
global function Modded_Gamemode_AITdm_Extended_Init

// npc counts
const int SQUADS_PER_TEAM = 5
//const int SQUADS_PER_TEAM_MORE_PLAYERS = 3 // maybe do reduced squad if we have more players and reached higher level
const int SQUADS_PER_TEAM_HIGH_LEVEL = 3 // maybe do reduced squad if we have reached higher level
const int REAPERS_PER_TEAM = 2 // was 2, reduced reaper spawn since we're using tick spawner reapers

const int MARVINS_PER_TEAM = 0
const int PROWLERS_PER_TEAM = 0
const int PROWLER_SQUADS_PER_TEAM = 1 // prowler squad: 2 cqb prowler with 3 small prowlers
const int PILOTS_PER_TEAM = 3

const int TITANS_PER_TEAM = 0
const int GUNSHIPS_PER_TEAM = 0 // was 2, removed until I figure out how to make gunships attacking

// escalator default value
const int LEVEL_SPECTRES = 80
const int LEVEL_STALKERS = 150
const int LEVEL_REAPERS = 230
const int LEVEL_GUNSHIPS = 280 // unused
const int LEVEL_TITANS = 320

// scores
const int PLAYER_SCORE_AMOUNT = 5
const int PILOT_SCORE_AMOUNT = 5
const int GUNSHIP_SCORE_AMOUNT = 5
const int MARVIN_SCORE_AMOUNT = 1
const int GRUNT_SCORE_AMOUNT = 1
const int SPECTRE_SCORE_AMOUNT = 1
const int STALKER_SCORE_AMOUNT = 2
const int PROWLER_SCORE_AMOUNT = 2
const int SMALL_PROWLER_SCORE_AMOUNT = 1
const int REAPER_SCORE_AMOUNT = 5
const int DRONE_SCORE_AMOUNT = 0
const int TITAN_SCORE_AMOUNT = 10

struct
{
	// Due to team based escalation everything is an array
	array< int > levels = [ LEVEL_SPECTRES, LEVEL_SPECTRES ]
	array< array< string > > podEntities = [ [ "npc_soldier" ], [ "npc_soldier" ] ]
	array< bool > reapers = [ false, false ]

	array< bool > marvins = [ false, false ]
	array< bool > prowlers = [ false, false ] // bind with stalkers
	array< bool > weapondrops = [ false, false ]

	array< bool > gunships = [ false, false ]
	array< bool > pilots = [ false, false ]
	array< bool > titans = [ false, false ]
} file


void function Modded_Gamemode_AITdm_Extended_Init()
{
	SetSpawnpointGamemodeOverride( ATTRITION ) // use bounty hunt spawns as vanilla game has no spawns explicitly defined for aitdm

	AddCallback_GameStateEnter( eGameState.Prematch, OnPrematchStart )
	AddCallback_GameStateEnter( eGameState.Playing, OnPlaying )

	// scoring
	AddDeathCallback( "player", ForceAddScoreForPlayerOrNPCKill )

	// npc killed score event, using death callbacks for npc killing each other!
	// these two can't be handle by scoreEvents
	AddDeathCallback( "npc_pilot_elite", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_gunship", ForceAddScoreForPlayerOrNPCKill )

	AddDeathCallback( "npc_marvin", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_soldier", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_spectre", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_stalker", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_prowler", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_super_spectre", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_drone", ForceAddScoreForPlayerOrNPCKill )
	AddDeathCallback( "npc_titan", ForceAddScoreForPlayerOrNPCKill )

	AddCallback_OnClientConnected( OnPlayerConnected )

	AddCallback_NPCLeeched( OnSpectreLeeched )

	ScoreEvent_SetupEarnMeterValuesForMixedModes()

    // game settings
	Highlight_SetCustomHighlightFunction( AiTDMExtend_Highlight ) // highlight handle for phase shift and such
    // npc executions
	//MeleeSyncedNPC_EnableAll_Init() // npc executions for fun
	MeleeSyncedNPC_AllowNPCTitanExecutions( true )
	MeleeSyncedNPC_AllowNPCPilotExecutions( true )
	MeleeSyncedNPC_AllowNPCGruntExecutions( true ) // spectres don't have neck snap attacker sequence, they'll try pilot executions, which is bad
	MeleeSyncedNPC_AllowNPCPilotExecuteOtherNPCs( true ) // pilot models don't have syncedMeleeData initialized, so let them use mp pilot executions

    // ai configs
	AddSpawnCallback( "npc_soldier", GruntConfig )
	AddSpawnCallback( "npc_pilot_elite", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
	AddSpawnCallback( "npc_frag_drone", TickConfig )
	AddSpawnCallback( "npc_turret_sentry", TurretConfig )

	// ai damages
	AddDamageByCallback( "npc_pilot_elite", BuffPilotDamage )
}

void function AiTDMExtend_Highlight( entity ent )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( ent, "sp_enemy_pilot" )
	ent.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// highlights think
	string className = ent.GetClassName()
	switch ( className )
	{
		case "player":
			ent.e.hasDefaultEnemyHighlight = true
			string highlight = "enemy_player"
			if ( ent.IsTitan() )
				highlight = "enemy_titan"
			Highlight_SetEnemyHighlight( ent, highlight )
			break
		case "npc_pilot_elite":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_player" )
			break
		case "npc_titan":
		case "npc_super_spectre":
		case "npc_gunship":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_titan" )
			break
	}
}

////////////////////////////////
///// NPC CONFIG FUNCTIONS /////
////////////////////////////////

// hardcoded here
const array<string> GRUNTMODE_SPECIALIST_GRUNTS =
[
	"npc_soldier_shield_captain",
	"npc_soldier_pve_specialist",
	"npc_soldier_sidearm"
]
void function GruntConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// hardcoded here
	string aiSetName = soldier.GetAISettingsName()
	bool isSpecialistGrunt = GRUNTMODE_SPECIALIST_GRUNTS.contains( aiSetName )
	if ( !isSpecialistGrunt ) // normal grunts
	{
		soldier.SetMaxHealth( 80 )
		soldier.SetHealth( 80 )
	}
	
	thread GruntTitleThink( soldier ) // specialist grunts may spawn from dropship, do a think here

	Melee_SetHumanSizedDoClassicExecution( soldier, true ) // grunts uses classic neck snap
}

void function GruntTitleThink( entity soldier )
{
	soldier.EndSignal( "OnDestroy" )
	soldier.EndSignal( "OnDeath" )

	float endTime = Time() + 5
	while ( Time() <= endTime )
	{
		WaitFrame()
		string aiSetName = soldier.GetAISettingsName()
		bool isSpecialistGrunt = GRUNTMODE_SPECIALIST_GRUNTS.contains( aiSetName )
		if ( !isSpecialistGrunt )
			continue
		WaitFrame() // they may get a title from spawn function, we wait a frame before changing again
		soldier.SetTitle( GetMilitiaTitle() ) // funny in _ai_soldiers.gnut
		return
	}
}

void function PilotConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

void function MarvinConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 300 )
	soldier.SetHealth( 300 )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function ProwlerConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// so they won't block teammates( won't work )
	soldier.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER
}

void function SpectreConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 190 )
	soldier.SetHealth( 190 )
}

void function StalkerConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetMaxHealth( 280 )
	soldier.SetHealth( 280 )
}

void function ReaperConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// even stronger
	soldier.SetMaxHealth( 5000 ) // was 5500, we have 2 reapers now...
	soldier.SetHealth( 5000 )
}

void function TitanConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

void function DroneConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

void function GunshipConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
	// lower health since they'll become noTarget
	soldier.SetMaxHealth( 5500 )
	soldier.SetHealth( 5500 )

	//soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function DropshipConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function TickConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )

	// enemy highlight
	Highlight_SetEnemyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 2, 0, < 2,0,0 > )
}

void function TurretConfig( entity soldier )
{
	// friendly highlight
	Highlight_SetFriendlyHighlight( soldier, "sp_enemy_pilot" )
	soldier.Highlight_SetParam( 1, 0, < 2,2,2 > )
}

////////////////////////////////////
///// NPC CONFIG FUNCTIONS END /////
////////////////////////////////////


////////////////////////////////
///// NPC DAMAGE FUNCTIONS /////
////////////////////////////////

const float NPC_PILOT_DAMAGE_MULTIPLIER = 2.5

void function BuffPilotDamage( entity victim, var damageInfo )
{
	if ( victim.GetArmorType() != ARMOR_TYPE_HEAVY ) // not a heavy armor target
	{
		// make npc pilots powerful?
		DamageInfo_SetDamage( damageInfo, DamageInfo_GetDamage( damageInfo ) * NPC_PILOT_DAMAGE_MULTIPLIER )
	}
}

////////////////////////////////////
///// NPC DAMAGE FUNCTIONS END /////
////////////////////////////////////



//////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION /////
//////////////////////////////////////////

void function InitExtraSpawnerSettings()
{
	ExtraSpawner_SetNPCWeapons( "npc_soldier", ["mp_weapon_rspn101", "mp_weapon_lmg", "mp_weapon_shotgun", "mp_weapon_r97", "mp_weapon_dmr"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_soldier", ["mp_weapon_rocket_launcher", "mp_weapon_mgl"] )
	ExtraSpawner_SetNPCWeapons( "npc_spectre", ["mp_weapon_mastiff", "mp_weapon_doubletake", "mp_weapon_hemlok_smg", "mp_weapon_hemlok"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_spectre", ["mp_weapon_arc_launcher", "mp_weapon_defender"] )

	ExtraSpawner_SetNPCWeapons( "npc_pilot_elite", ["mp_weapon_rspn101_og", "mp_weapon_r97", "mp_weapon_car", "mp_weapon_hemlok_smg", "mp_weapon_hemlok", "mp_weapon_g2", "mp_weapon_esaw", "mp_weapon_vinson"] )
	ExtraSpawner_SetNPCWeapons( "npc_stalker", ["mp_weapon_softball", "mp_weapon_smr"] ) // npcs can't shoot "mp_weapon_pulse_lmg"

	//AiDrone_SetDroneSpawnedByNPCRandomType( true ) // modified function in _ai_drone.nut, specialist grunts will spawn random drones
	AiDrone_SetDroneSpawnedByNPCForceDie( true ) // modified function in _ai_drone.nut, drones spawned by npcs will be destroyed right after it's owner's death

	Wallrun_EnableProtectionForRodeoPlayerAgainstNPCs( false ) // modified function in class_wallrun.gnut. disable damage immune against npcs while rodeoing
}

//////////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION END /////
//////////////////////////////////////////////

//------------------------------------------------------

void function OnPrematchStart()
{
    InitExtraSpawnerSettings() // npc weapon settings or something...

	thread StratonHornetDogfightsIntense()
}

void function OnPlaying()
{
	// don't run spawning code if ains and nms aren't up to date
	if ( GetAINScriptVersion() == AIN_REV && GetNodeCount() != 0 )
	{
		thread SpawnIntroBatch( TEAM_MILITIA )
		thread SpawnIntroBatch( TEAM_IMC )
	}

	// cleaning up
	CleanUpOverloadedTicks()
	TryCleanupBoredNPCGameLong()
}

void function OnPlayerConnected( entity player )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_AITDM_OnPlayerConnected" )
}

//------------------------------------------------------

void function ForceAddScoreForPlayerOrNPCKill( entity victim, var damageInfo )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if( !IsValid( attacker ) )
		return
	if( !attacker.IsNPC() && !attacker.IsPlayer() ) // not killed by anybody
		return

	if ( attacker == victim ) // suicide!
		return

	// if it's a npc with bossplayer/owner...
	if ( attacker.IsNPC() )
	{
		// reassign attacker
		if ( IsValid( attacker.GetBossPlayer() ) )
			attacker = attacker.GetBossPlayer()
		if ( IsValid( attacker.GetOwner() ) )
			attacker = attacker.GetOwner()
	}

	if ( victim.IsNPC() )
	{
		// if victim is a npc that owned by players, don't add score
		entity bossPlayer = victim.GetBossPlayer()
		entity owner = victim.GetOwner()
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				return
		}
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				return
		}
	}

	string className = victim.GetClassName()
	int scoreToAdd = 0
	string scoreEvent = "" // for npcs can't handle by OnNPCKilled(), do a extra score event

	if ( victim.IsPlayer() )
		scoreToAdd = PLAYER_SCORE_AMOUNT

	if ( className == "npc_pilot_elite" )
	{
		scoreToAdd = PILOT_SCORE_AMOUNT
		scoreEvent = "EliminatePilot"
		// we can't add a obitary for npc pilots since OBITUARY_ENABLED_NPC is false
	}

	if ( className == "npc_gunship" )
		scoreToAdd = GUNSHIP_SCORE_AMOUNT

	if ( className == "npc_marvin" )
		scoreToAdd = MARVIN_SCORE_AMOUNT

	if ( className == "npc_prowler" )
	{
		// hardcoded here: if it's a small prowler we add less score
		if ( float( victim.kv.modelscale ) < 1.0 )
			scoreToAdd = SMALL_PROWLER_SCORE_AMOUNT
		else
			scoreToAdd = PROWLER_SCORE_AMOUNT
	}

	if ( className == "npc_spectre" )
		scoreToAdd = SPECTRE_SCORE_AMOUNT

	if ( className == "npc_stalker" )
		scoreToAdd = STALKER_SCORE_AMOUNT

	if ( className == "npc_super_spectre" )
		scoreToAdd = REAPER_SCORE_AMOUNT

	if ( className == "npc_soldier" )
		scoreToAdd = GRUNT_SCORE_AMOUNT
	
	if ( className == "npc_drone" )
		scoreToAdd = DRONE_SCORE_AMOUNT

	// Player ejecting triggers this without the extra check
	if ( victim.IsTitan() && victim.GetBossPlayer() != attacker )
	{
		if ( TitanHasNpcPilot( victim ) ) // pilot was killed without ejecting
		{
			scoreToAdd = TITAN_SCORE_AMOUNT + PILOT_SCORE_AMOUNT
			scoreEvent = "EliminatePilot"
		}
		else if ( victim.IsPlayer() ) // fix for player score!
			scoreToAdd = TITAN_SCORE_AMOUNT + PLAYER_SCORE_AMOUNT
		else // ejecting auto titan
			scoreToAdd = TITAN_SCORE_AMOUNT
		
		// obit, has been fixed in _base_gametype_mp.gnut
		//foreach ( entity player in GetPlayerArray() )
		//	Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	}

	if ( scoreToAdd > 0 )
		AddTeamScore( attacker.GetTeam(), scoreToAdd ) // this can handle both players' and npcs' kills
	if( attacker.IsPlayer() ) // specific for players
	{
		if ( scoreEvent != "" )
			AddPlayerScore( attacker, scoreEvent, victim )
		if ( scoreToAdd > 0 )
		{
			attacker.AddToPlayerGameStat( PGS_ASSAULT_SCORE, scoreToAdd )
			attacker.SetPlayerNetInt( "AT_bonusPoints", attacker.GetPlayerGameStat( PGS_ASSAULT_SCORE ) )
		}
	}
}

//------------------------------------------------------

// CHECK FUNCTIONS

bool function ShouldSpawnSpecialistSquad()
{
	return RandomInt( 3 ) > 0 // 66% chance of spawning a specialist squad(??
}

bool function ShouldSpawnDropship()
{
	array<entity> points = GetZiplineDropshipSpawns()
	if ( points.len() <= 4 ) // must have more than 4 points
		return false

	return RandomInt( 3 ) == 0 // 33% chance of choose to spawn a dropship
}

string function GetSpecialistGruntLeader()
{
	// 20% chance of spawning a shield captain
	bool spawnShieldCaptain = RandomInt( 5 ) == 0
	string leaderSet = "npc_soldier_pve_specialist"
	if ( spawnShieldCaptain )
		leaderSet = "npc_soldier_shield_captain"
	else if ( CoinFlip() ) // otherwise we have 50% chance of spawning a sniper grunt
		leaderSet = "npc_soldier_sidearm"
	
	//print( "leaderAiSet: " + leaderSet )

	return leaderSet
}

int function GetSpecialistLeaderHealth( int team, string otherSpawnWith )
{
	int index = team == TEAM_MILITIA ? 0 : 1
	return 200 + ( 60 * file.podEntities[ index ].find( otherSpawnWith ) )
}

bool function ShouldSpawnBossTitan()
{
	return RandomInt( 3 ) == 0 // boss titans has 33% chance to spawn
}

entity functionref( vector origin, vector angles, int team ) function GetBossTitanSpawnFunc( int team )
{
	// team specific
	if ( team == TEAM_IMC )
	{
		switch ( RandomInt( 2 ) )
		{
			case 0:
				return ExtraSpawner_SpawnRoninWithAsh
				break
			case 1:
				return ExtraSpawner_SpawnLegionWithBlisk
				break
		}
	}
	else if ( team == TEAM_MILITIA )
	{
		switch ( RandomInt( 2 ) )
		{
			case 0:
				return ExtraSpawner_SpawnBTWithCooper
				break
			case 1:
				return ExtraSpawner_SpawnVanguardWithSarah
				break
		}
	}

	// default case
	switch ( RandomInt( 4 ) )
	{
		case 0:
			return ExtraSpawner_SpawnBTWithCooper
			break
		case 1:
			return ExtraSpawner_SpawnVanguardWithSarah
			break
		case 2:
			return ExtraSpawner_SpawnRoninWithAsh
			break
		case 3:
			return ExtraSpawner_SpawnLegionWithBlisk
			break
	}
}

bool function ReachedPlayerCheckAmount()
{
	int maxPlayers = GetCurrentPlaylistVarInt( "max_players", 16 )
	if ( float ( GetPlayerArray().len() ) >= float ( maxPlayers ) * 0.6 )
		return true
	return false
}

//


void function SpawnIntroBatch( int team )
{
	array<entity> dropPodNodes = GetEntArrayByClass_Expensive( "info_spawnpoint_droppod_start" )
	array<entity> dropShipNodes = GetValidIntroDropShipSpawn( dropPodNodes )  
	
	array<entity> podNodes
	
	array<entity> shipNodes
	
	
	// mp_rise has weird droppod_start nodes, this gets around it
	// To be more specific the teams aren't setup and some nodes are scattered in narnia
	if( GetMapName() == "mp_rise" )
	{
		entity spawnPoint
		
		// Get a spawnpoint for team
		foreach ( point in GetEntArrayByClass_Expensive( "info_spawnpoint_dropship_start" ) )
		{
			if ( point.HasKey( "gamemode_tdm" ) )
				if ( point.kv[ "gamemode_tdm" ] == "0" )
					continue
			
			if ( point.GetTeam() == team )
			{
				spawnPoint = point
				break
			}
		}
		
		// Get nodes close enough to team spawnpoint
		foreach ( node in dropPodNodes )
		{
			if ( node.HasKey("teamnum") && Distance2D( node.GetOrigin(), spawnPoint.GetOrigin()) < 2000 )
				podNodes.append( node )
		}
	}
	else
	{
		// Sort per team
		foreach ( node in dropPodNodes )
		{
			if ( node.GetTeam() == team )
				podNodes.append( node )
		}
	}

	shipNodes = GetValidIntroDropShipSpawn( podNodes )


	// Spawn logic
	int startIndex = 0
	bool first = true
	entity node
	string introSpawnClass = "npc_soldier"
	
	int pods = RandomInt( podNodes.len() + 1 )
	
	int ships = shipNodes.len()
	
	for ( int i = 0; i < SQUADS_PER_TEAM; i++ )
	{
		if ( pods != 0 || ships == 0 )
		{
			int index = i
			
			if ( index > podNodes.len() - 1 )
			index = RandomInt( podNodes.len() )
			
			node = podNodes[ index ]
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, leaderSet )
				thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, leaderSet, leaderHealth, SquadHandler )
			}
			else
				thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, SquadHandler )

			pods--
		}
		else
		{
			if ( startIndex == 0 ) 
			startIndex = i // save where we started
			
			node = shipNodes[ i - startIndex ]
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, leaderSet )
				thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4, leaderSet, leaderHealth, SquadHandler )
			}
			else
				thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4, SquadHandler )
			
			ships--
		}
		
		// Vanilla has a delay after first spawn
		if ( first )
			wait 2
		
		first = false
	}

	wait 5
	thread Spawner( team )
	thread SpawnerExtend( team )
}

// Populates the match
void function Spawner( int team )
{
	//svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	int index = team == TEAM_MILITIA ? 0 : 1

	while( GetGameState() == eGameState.Playing )
	{
		Escalate( team )

		WaitFrame() // wait a frame each loop

		// TODO: this should possibly not count scripted npc spawns, probably only the ones spawned by this script
		array<entity> npcs = GetNPCArrayOfTeam( team )
		int count = npcs.len()
		int reaperCount = GetNPCArrayEx( "npc_super_spectre", team, -1, <0,0,0>, -1 ).len()

		// REAPERS
		if ( file.reapers[ index ] )
		{
			array< entity > points = SpawnPoints_GetTitan()
			if ( reaperCount < REAPERS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnReaper( node.GetOrigin(), node.GetAngles(), team, "npc_super_spectre_aitdm", ReaperHandler )
				// crazy reaper
				string reaperSettings = "npc_super_spectre_aitdm"
				string tickSettings = "npc_frag_drone"
				if ( CoinFlip() ) // 50% change of spawning sp ticks, 50% chance spawning mp ticks
					tickSettings = "npc_frag_drone_throwable"
				thread ExtraSpawner_SpawnReaperCanLaunchTicks( node.GetOrigin(), node.GetAngles(), team, reaperSettings, tickSettings )
				wait 8 // wait 8 for each reaper spawn. should always keep highter than REAPER_WARPFALL_DELAY (current is 4.7)
			}
		}

		// NORMAL SPAWNS
		int maxSquads = SQUADS_PER_TEAM
		//if ( ReachedPlayerCheckAmount() && file.reapers[ index ] ) // if we have pretty much players and reached reaper level
		//	maxSquads = SQUADS_PER_TEAM_MORE_PLAYERS // do reduced minions count
		if ( file.reapers[ index ] )
			maxSquads = SQUADS_PER_TEAM_HIGH_LEVEL
		if ( count < maxSquads * 4 - 2 )
		{
			if ( ShouldSpawnSpecialistSquad() )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				
				string ent = file.podEntities[ index ][ RandomInt( file.podEntities[ index ].len() ) ]
				string leaderSet = GetSpecialistGruntLeader()
				// add health depending on what npc it spawning with
				int leaderHealth = GetSpecialistLeaderHealth( team, ent )
				//print( "RUNNING ExtraSpawner_SpawnSpecialistGruntDropPod()" )
				//print( "leaderHealth is: " + string( leaderHealth ) )
				if ( ShouldSpawnDropship() )
				{
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, "npc_soldier", 4, leaderSet, leaderHealth, SquadHandler )
					wait 6 // dropship may take some time to really spawn a squad
					continue
				}
				
				points = SpawnPoints_GetDropPod()
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, ent, leaderSet, leaderHealth, SquadHandler )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
			else
			{
				string ent = file.podEntities[ index ][ RandomInt( file.podEntities[ index ].len() ) ]

				array< entity > points = GetZiplineDropshipSpawns()

				if ( ShouldSpawnDropship() )
				{
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, ent, 4, SquadHandler )
					wait 6 // dropship may take some time to really spawn a squad
					continue
				}

				points = SpawnPoints_GetDropPod()
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent, SquadHandler )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}
	}
}

void function SpawnerExtend( int team )
{
	//svGlobal.levelEnt.EndSignal( "GameStateChanged" )

	int index = team == TEAM_MILITIA ? 0 : 1

	while( GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		int marvinCount = GetNPCArrayEx( "npc_marvin", team, -1, <0,0,0>, -1 ).len()
		int prowlerCount = GetNPCArrayEx( "npc_prowler", team, -1, <0,0,0>, -1 ).len()
		int gunshipCount = GetNPCArrayEx( "npc_gunship", team, -1, <0,0,0>, -1 ).len()
		int titanCount = GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 ).len()
		int pilotCount = GetNPCArrayEx( "npc_pilot_elite", team, -1, <0,0,0>, -1 ).len() + GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 ).len()

		// GUNSHIPS
		if ( file.gunships[ index ] )
		{
			array< entity > points = SpawnPoints_GetDropPod()
			if ( gunshipCount < GUNSHIPS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnGunShip( node.GetOrigin(), node.GetAngles(), team )
				wait 5 // on succesful spawn
			}
		}

		// TITANS
		if ( file.titans[ index ] )
		{
			array< entity > points = SpawnPoints_GetDropPod()
			if ( titanCount < TITANS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				thread ExtraSpawner_SpawnTitanRandom( node.GetOrigin(), node.GetAngles(), team, true, TitanHandler )
				wait 8 // wait 8s on succesful titan spawn
			}
		}

		// PILOTS
		if ( file.pilots[ index ] )
		{
			array< entity > points
			points.extend( SpawnPoints_GetTitanStart( TEAM_IMC ) )
			points.extend( SpawnPoints_GetTitanStart( TEAM_MILITIA ) )
			if ( pilotCount < PILOTS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//entity titan = AiGameModes_SpawnTitanRandom( node.GetOrigin(), node.GetAngles(), team, TitanHandler )
				if ( ShouldSpawnBossTitan() ) 
					thread GetBossTitanSpawnFunc( -1 )( node.GetOrigin(), node.GetAngles(), team ) // get bosstitan spawn func without team check
				else
					thread ExtraSpawner_SpawnPilotCanEmbark( node.GetOrigin(), node.GetAngles(), team )

				wait 8 // wait 8 for each titan spawn. should always keep highter than SpawnPilotCanEmbark()'s titan spawn delay(current is 3)
			}
		}

		// MARVINS
		if ( file.marvins[ index ] )
		{
			string ent = "npc_marvin"
			array< entity > points = SpawnPoints_GetDropPod()
			if ( marvinCount < MARVINS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				// spawn 2 marvins per droppod
				thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, ent, 2 )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}

		// PROWLERS
		if ( file.prowlers[ index ] )
		{
			string ent = "npc_prowler"
			array< entity > points = SpawnPoints_GetDropPod()
			if ( prowlerCount < PROWLERS_PER_TEAM )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				// spawn 1 prowler per droppod
				thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, ent, 1, SquadHandler )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}

		// PROWLER SQUADS
		if ( file.prowlers[ index ] )
		{
			//print( "prowlerCount: " + string( prowlerCount ) )
			array< entity > points = SpawnPoints_GetDropPod()
			if ( prowlerCount < PROWLER_SQUADS_PER_TEAM * 4 - 2 )
			{
				entity node = points[ GetSpawnPointIndex( points, team ) ]
				//print( "RUNNING ExtraSpawner_SpawnProwlerSquadDropPod()" )
				thread ExtraSpawner_SpawnProwlerSquadDropPod( node.GetOrigin(), node.GetAngles(), team, SquadHandler )
				wait 5 // they'll spawn upon droppod touch ground, wait 5s
			}
		}
	}
}

// Based on points tries to balance match
void function Escalate( int team )
{
	int score = GameRules_GetTeamScore( team )
	int index = team == TEAM_MILITIA ? 1 : 0
	// This does the "Enemy x incoming" text
	string defcon = team == TEAM_MILITIA ? "IMCdefcon" : "MILdefcon"

	if ( score < file.levels[ index ] )
		return

	switch ( file.levels[ index ] )
	{
		case LEVEL_SPECTRES:
			file.levels[ index ] = LEVEL_STALKERS
			file.marvins[ index ] = true
			file.podEntities[ index ].append( "npc_spectre" )
			SetGlobalNetInt( defcon, 2 )
			return

		case LEVEL_STALKERS:
			file.levels[ index ] = LEVEL_REAPERS
			file.marvins[ index ] = false
			file.weapondrops[ index ] = true
			file.prowlers[ index ] = true
			file.podEntities[ index ].append( "npc_stalker" )
			SetGlobalNetInt( defcon, 3 )
			return

		case LEVEL_REAPERS:
			file.levels[ index ] = LEVEL_GUNSHIPS
			file.reapers[ index ] = true
			SetGlobalNetInt( defcon, 4 )
			return

        case LEVEL_GUNSHIPS:
			file.levels[ index ] = LEVEL_TITANS
			file.gunships[ index ] = true
			SetGlobalNetInt( defcon, 5 )
			return


		case LEVEL_TITANS:
			file.levels[ index ] = 9999
			file.prowlers[ index ] = false
			file.pilots[ index ] = true
			file.titans[ index ] = true
			SetGlobalNetInt( defcon, 6 )
			return
	}

	unreachable // hopefully
}

//------------------------------------------------------

int function GetSpawnPointIndex( array< entity > points, int team )
{
	entity zone = DecideSpawnZone_Generic( points, team )

	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			int index = RandomInt( points.len() )

			if ( Distance2D( points[ index ].GetOrigin(), zone.GetOrigin() ) < 6000 )
				return index
		}
	}

	return RandomInt( points.len() )
}

//------------------------------------------------------

// tells infantry where to go
// In vanilla there seem to be preset paths ai follow to get to the other teams vone and capture it
// AI can also flee deeper into their zone suggesting someone spent way too much time on this
void function SquadHandler( array<entity> guys )
{
	int team = guys[0].GetTeam()
	bool hasHeavyArmorWeapon = false // let's check if guys has heavy armor weapons
	foreach ( entity guy in guys )
	{
		if ( hasHeavyArmorWeapon ) // found heavy armor weapon
			break

		foreach ( entity weapon in guy.GetMainWeapons() )
		{
			if ( !weapon.GetWeaponSettingBool( eWeaponVar.titanarmor_critical_hit_required ) )
			{
				hasHeavyArmorWeapon = true
				break
			}
		}
	}
	//print( "hasHeavyArmorWeapon: " + string( hasHeavyArmorWeapon ) )

	array<entity> points
	vector point

	// Setup AI
	foreach ( guy in guys )
	{
		// add map
		AddMinimapForNPC( guy, true )
		guy.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
		guy.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
	}

	// Every 5 - 15 secs get a closest target and go to them
	while ( true )
	{
		WaitFrame() // wait a frame each loop

		foreach ( guy in guys )
		{
			// remove dead guys
			ArrayRemoveDead( guys )
			// Stop func if our squad has been killed off
			if ( guys.len() == 0 )
				return
		}

		// Get point and send our whole squad to it
		points = []
		if ( hasHeavyArmorWeapon )
		{
			points.extend( GetNPCArrayOfEnemies( team ) )
			foreach ( entity player in GetPlayerArrayOfEnemies_Alive( team ) ) // also find titan players if they have heavy armor weapon
			{
				if ( player.IsTitan() ) // only search for npcs with light armor
					points.append( player )
			}
		}
		else
		{
			foreach ( entity npc in GetNPCArrayOfEnemies( team ) )
			{
				if ( npc.GetArmorType() != ARMOR_TYPE_HEAVY ) // only search for npcs with light armor
					points.append( npc )
			}
		}
		ArrayRemoveDead( points ) // remove dead targets
		if ( points.len() == 0 ) // can't find any points here
			continue

		entity enemy = GetClosest2D( points, guys[0].GetOrigin() )
		point = enemy.GetOrigin()
		
		foreach ( guy in guys )
		{
			if ( IsAlive( guy ) )
				guy.AssaultPoint( point )
		}
		wait RandomFloatRange(5.0,15.0)
	}
}

// handle a single npc
void function NPCHandler( entity npc )
{
	SquadHandler( [npc] )
}

// handle titans
void function TitanHandler( entity titan )
{
	titan.EndSignal( "OnDestroy" )
	titan.EndSignal( "OnDeath" )
	
	int team = titan.GetTeam()
	while ( GetNPCArrayOfEnemies( team ).len() == 0 )
		WaitFrame()

	array<entity> points = GetNPCArrayOfEnemies( team )
	
	vector point
	point = points[ RandomInt( points.len() ) ].GetOrigin()
	
	array<entity> players = GetPlayerArrayOfEnemies( team )
	
	// Setup AI
	titan.EnableNPCFlag( NPC_ALLOW_PATROL | NPC_ALLOW_INVESTIGATE | NPC_ALLOW_HAND_SIGNALS | NPC_ALLOW_FLEE )
	titan.AssaultPoint( point )
	titan.AssaultSetGoalRadius( 1600 ) // 1600 is minimum for npc_stalker, works fine for others
	AddMinimapForNPC( titan, false )
	
	// Every 5 - 15 secs change AssaultPoint
	while ( true )
	{	
		WaitFrame() // wait a frame each loop
		
		// Check if alive
		if ( !IsAlive( titan ) )
			return
		
		// Get point and send guy to it
		points = GetNPCArrayOfEnemies( titan.GetTeam() )
		if ( points.len() == 0 )
			continue
			
		point = points[ RandomInt( points.len() ) ].GetOrigin()
		
		titan.AssaultPoint( point )
		wait RandomFloatRange(5.0,15.0)
	}
}

// npc minimap and spawn checks
void function AddMinimapForNPC( entity guy, bool isHumanSized )
{
	if ( !IsAlive( guy ) )
		return
	
	// map
	guy.Minimap_AlwaysShow( TEAM_IMC, null )
	guy.Minimap_AlwaysShow( TEAM_MILITIA, null )
	foreach ( entity player in GetPlayerArray() )
		guy.Minimap_AlwaysShow( 0, player )
	guy.Minimap_SetHeightTracking( true )

	if ( isHumanSized )
		guy.Minimap_SetCustomState( eMinimapObject_npc.AI_TDM_AI )
}

// Award for hacking
void function OnSpectreLeeched( entity spectre, entity player )
{
	// Set Owner so we can filter in HandleScore
	spectre.SetOwner( player )
	// Add score + update network int to trigger the "Score +n" popup
	AddTeamScore( player.GetTeam(), 1 )
	player.AddToPlayerGameStat( PGS_ASSAULT_SCORE, 1 )
	player.SetPlayerNetInt("AT_bonusPoints", player.GetPlayerGameStat( PGS_ASSAULT_SCORE ) )
}

void function ReaperHandler( entity reaper )
{
	array<entity> players = GetPlayerArrayOfEnemies( reaper.GetTeam() )
	foreach ( player in players )
		reaper.Minimap_AlwaysShow( 0, player )
}

// ticks clean up
void function CleanUpOverloadedTicks()
{
	thread CleanUpOverloadedTicks_Threaded()
}

void function CleanUpOverloadedTicks_Threaded()
{
	array<entity> tickArray = GetNPCArrayByClass( "npc_frag_drone" )
	int maxTicks = REAPERS_PER_TEAM * 4 + 2
	while ( true )
	{
		if( tickArray.len() > maxTicks ) // clean up ticks spawned by reapers
		{
			if ( IsAlive( tickArray[0] ) )
				tickArray[0].Die() // this may kill somebody lol
		}
		WaitFrame()
	}
}

// npc clean up
void function TryCleanupBoredNPCGameLong()
{
	thread TryCleanupBoredNPCGameLong_Threaded()
}

void function TryCleanupBoredNPCGameLong_Threaded()
{
	// keep searching new npcs and run CleanupBoredNPCThread() for them
	while ( true )
	{
		foreach ( entity npc in GetNPCArray() )
		{
			if ( !( "waitingToBeCleanUp" in npc.s ) )
				npc.s.waitingToBeCleanUp <- false
			if ( !npc.s.waitingToBeCleanUp )
			{
				thread CleanupBoredNPCThread( npc )
				npc.s.waitingToBeCleanUp = true
			}
		}
		WaitFrame()
	}
}

void function CleanupBoredNPCThread( entity guy )
{
	// track all ai that we spawn, ensure that they're never "bored" (i.e. stuck by themselves doing fuckall with nobody to see them) for too long
	// if they are, kill them so we can free up slots for more ai to spawn
	// we shouldn't ever kill ai if players would notice them die

	// NOTE: this partially covers up for the fact that we script ai alot less than vanilla probably does
	// vanilla probably messes more with making ai assaultpoint to fights when inactive and stuff like that, we don't do this so much

	if ( guy.GetClassName() == "npc_marvin" ) // never clean up marvins
		return
	guy.EndSignal( "OnDestroy" )
	// cover spawning time from dropship/pod + before we start cleaning up
	WaitFrame()
	while ( IsValid( guy.GetParent() ) )
		WaitFrame()

	wait 10.0 // initial wait
	int team = guy.GetTeam()
	vector lastCheckOrigin = guy.GetOrigin() // if they get stucked we also clean up
	int cleanupFailures = 0 // when this hits 2, cleanup the npc
	while ( cleanupFailures < 2 )
	{
		wait 10.0

		if ( guy.Anim_IsActive() ) // anim active, such as marvin doing a job or npc being executed
			continue

		// if the npc is owner by player, we skip checks
		entity owner = guy.GetOwner()
		entity bossPlayer = guy.GetBossPlayer()
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				continue
		}
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				continue
		}

		// if npc is a titan with bubbleshield, we skip checks
		if ( guy.IsTitan() )
		{
			entity soul = guy.GetTitanSoul()
			if( IsValid( soul ) )
			{
				entity bubbleShield = soul.soul.bubbleShield
				if ( IsValid( bubbleShield ) )
					continue
			}
		}

		array<entity> otherGuys = GetPlayerArray()
		otherGuys.extend( GetNPCArrayOfEnemies( team ) )

		bool failedChecks = false

		foreach ( entity otherGuy in otherGuys )
		{
			// skip dead people
			if ( !IsAlive( otherGuy ) )
				continue

			failedChecks = false

			// don't kill if too close to anything
			if ( Distance( otherGuy.GetOrigin(), guy.GetOrigin() ) < 2000.0 )
				break

			// don't kill if ai or players can see them
			if ( otherGuy.IsPlayer() )
			{
				if ( PlayerCanSee( otherGuy, guy, true, 135 ) )
					break
			}
			else
			{
				if ( otherGuy.CanSee( guy ) )
					break
			}

			// don't kill if they can see any ai
			if ( guy.CanSee( otherGuy ) )
				break

			failedChecks = true
		}

		if ( Distance( guy.GetOrigin(), lastCheckOrigin ) <= 64 ) // assume they're not moving
			failedChecks = true // mark as checks failed

		if ( failedChecks )
			cleanupFailures++
		else
			cleanupFailures--

		lastCheckOrigin = guy.GetOrigin()
	}

	print( "cleaning up bored npc: " + guy + " from team " + guy.GetTeam() )
	HideName( guy ) // prevent their title or health bar from showing
	TakeAllWeapons( guy ) // so they won't have a weapon floating
	guy.EnableNPCFlag( NPC_IGNORE_ALL ) // disable any sensing
	guy.NotSolid() // disable collision
	// titan being dissolved
	if ( guy.IsTitan() )
	{
		entity soul = guy.GetTitanSoul()
		if( IsValid( soul ) )
		{
			// end any rodeo on it
			ForceTitanRodeoToEnd( guy )
			DisableTitanRodeo( guy )
			// try to hide a cleaning up titan's batteryContainer
			entity batteryContainer = soul.soul.batteryContainer
			if ( IsValid( batteryContainer ) )
				batteryContainer.Hide()
		}
	}
	// reaper being dissolved
	if ( guy.GetClassName() == "npc_super_spectre" )
	{
		if ( guy.ai.activeMinionEntArrayID > 0 )
		{
			// detonate all frag drones they owned
			foreach ( entity ent in GetScriptManagedEntArray( guy.ai.activeMinionEntArrayID ) )
			{
				if ( IsValid( ent ) ) 
				{
					if ( ent.IsNPC() && ent.ai.fragDroneArmed ) // minion may doing a deploy animation, which handled by WaitForFragDroneDeployThenDetonate()
						ent.Signal( "SuicideSpectreExploding" )
					else if ( ent.GetClassName() == "grenade" ) // minion still a grenade
						ent.Destroy()
				}
			}
		}
	}
	guy.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 ) // dissolve them to have better visual
}