
global function GetSegmentHealthForTitan
global function GetDefaultTitanSegmentHealth
global function GetHealthSegmentFrac
global function GetCurrentTitanSegmentHealth
global function GetTitanCurrentRegenTab

// modified settings override
#if SERVER
global function TitanHealth_SetSegmentHealthOverride
struct
{
	table<entity, int> soulSegmentHealthOverride
} file
#endif

int function GetDefaultTitanSegmentHealth()
{
	return 2500
}

int function GetSegmentHealthForTitan( entity titan )
{
	Assert( titan.IsTitan() )

	entity soul = titan.GetTitanSoul()
	string settings = GetSoulPlayerSettings( soul )

	// modified settings override
	#if SERVER
	if ( soul in file.soulSegmentHealthOverride )
		return file.soulSegmentHealthOverride[ soul ]
	#endif
	//

	// vanilla behavior
	return int( GetPlayerSettingsFieldForClassName_HealthPerSegment( settings ) )
}

int function GetCurrentTitanSegmentHealth( entity titan )
{
	int health = titan.GetHealth()
	int segmentHealth = GetSegmentHealthForTitan( titan )

	while ( health > segmentHealth )
	{
		health -= segmentHealth
	}

	return health
}

float function GetHealthSegmentFrac( entity titan )
{
	float health = float( GetCurrentTitanSegmentHealth( titan ) )
	float segmentHealth = float( GetSegmentHealthForTitan( titan ) )

	return ( health / segmentHealth )
}

int function GetTitanCurrentRegenTab( entity titan )
{
	if ( !IsAlive( titan ) )
		return 0

	if ( GetDoomedState( titan ) )
		return 0

	int maxHealth = titan.GetMaxHealth()
	entity soul = titan.GetTitanSoul()
	float healthRatio = float( titan.GetHealth() ) / maxHealth

	// titan health can be negative sometimes
	if ( healthRatio < 0 )
		healthRatio = 0

	int totalTabs = maxHealth / GetSegmentHealthForTitan( titan )
	float tabsRemaining = healthRatio * totalTabs

	// if we have part of a tab, count it as one tab
	if ( tabsRemaining % 1.0 > 0.0 )
		return int( tabsRemaining ) + 1

	return int( tabsRemaining )
}


// modified settings override
#if SERVER
void function TitanHealth_SetSegmentHealthOverride( entity soul, int overrideHealth )
{
	if ( !( soul in file.soulSegmentHealthOverride ) )
		file.soulSegmentHealthOverride[ soul ] <- overrideHealth
	else
		file.soulSegmentHealthOverride[ soul ] = overrideHealth
}
#endif