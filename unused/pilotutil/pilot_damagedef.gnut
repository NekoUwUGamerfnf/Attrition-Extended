
global function Modded_Weapon_DamageDef_Init

void function Modded_Weapon_DamageDef_Init()
{
    #if SERVER
        // handled by projectile.ProjectileSetDamageSourceID()
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_mgl, DamageSource_TripWire )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_satchel, DamageSource_Proximity_Mine )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_semipistol, DamageSource_Gibber_Pistol )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_vinson, DamageSource_Flak_Rifle )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_thermite_grenade, DamageSource_Meteor )
        //AddDamageCallbackSourceID( eDamageSourceId.mp_weapon_softball, DamageSource_Sticky_Explosive )
    #endif
}

/* // handled by projectile.ProjectileSetDamageSourceID()
void function DamageSource_TripWire( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_weapon_tripwire, "tripwire_launcher", false, true )
}

void function DamageSource_Proximity_Mine( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_weapon_proximity_mine, "proximity_mine", false, true )
}

void function DamageSource_Gibber_Pistol( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_weapon_gibber_pistol, "gibber_pistol", false, true )
}

void function DamageSource_Flak_Rifle( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_weapon_flak_rifle, "flak_rifle", false, true )
}

void function DamageSource_Meteor( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.mp_titanweapon_meteor, "meteor_grenade", false, true )
}

void function DamageSource_Sticky_Explosive( entity ent, var damageInfo )
{
    OnDamagedTarget_ModdedWeapon( damageInfo, eDamageSourceId.sticky_explosive, "stickybomb_launcher", false, true )
}
*/

void function OnDamagedTarget_ModdedWeapon( var damageInfo, int damageSourceID, string hopup, bool isWeapon, bool isProjectile )
{
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !IsValid( attacker ) )
		return
    
    if( isProjectile )
    {
        entity inflictor = DamageInfo_GetInflictor( damageInfo )
        if( !IsValid( inflictor ) )
            return
        if( !inflictor.IsProjectile() )
            return

        array<string> mods = Vortex_GetRefiredProjectileMods( inflictor ) // modded weapon refire behavior
        if( mods.contains( hopup ) )
            DamageInfo_SetDamageSourceIdentifier( damageInfo, damageSourceID )
    }

    if( isWeapon )
    {
        entity weapon = DamageInfo_GetWeapon( damageInfo )
        if( !IsValid( weapon ) )
            return

        if( weapon.HasMod( hopup ) )
            DamageInfo_SetDamageSourceIdentifier( damageInfo, damageSourceID )
    }
}